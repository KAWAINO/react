import { Fragment } from 'react';

/* JSX 문법 */

/* 
  컴포넌트에 여러 요소가 있다면 반드시 부모 요소 하나로 감싸야 한다.
  컴포넌트 내부는 하나의 DOM 트리 구조로 이루어져야 한다는 규칙이 있기 때문이다.
  여기선 <div></div>가 부모 요소이다. 
*/
// function App() {
//   return ( 
//     <div> 
//       <h1>리엑트 안녕!</h1>
//       <h2>잘 작동하니?</h2>
//     </div>
//   );
// }

/*
  꼭 div요소를 사용하지 않아도 된다.
  이런 경우 리엑트 v16 이상부터 도입된 Fragment라는 기능을 사용하면 된다.
  페이지 상단 import { Fragment } from 'react'; 추가
*/
// function App() {
//   return ( 
//     <Fragment> 
//       <h1>리엑트 안녕!</h1>
//       <h2>잘 작동하니?</h2>
//     </Fragment>
//   );
// }

/*
  Fragment는 다음과 같은 형태로 표현할 수 있다.
*/
// function App() {
//   return ( 
//     <> 
//       <h1>리엑트 안녕!</h1>
//       <h2>잘 작동하니?</h2>
//     </>
//   );
// }

/*
  - 2.4.2 자바스크립트 표현
  JSX 안에는 자바스크립트 표현식을 쓸 수 있다.
  자바스크립트 표현식을 작성하려면 JSX 내부에서 코드를 { }로 감싸면 된다.
*/
// function App() {

//   const name = '리엑트';

//   return ( 
//     <> 
//       <h1>{name} 안녕!</h1>
//       <h2>잘 작동하니?</h2>
//     </>
//   );
// }

/*
  - if 문 대신 조건부 연산자
  JSX 내부의 자바스크립트 표현식에서 if문을 사용할 수는 없다.
  만약 사용해야 한단면 JSX 밖에서 if문을 사용하거나, { } 안에 조건부 연산자를 사용하면 된다.
*/
// function App() {

//   const name = '리엑트';

//   return ( 
//     <>
//       {name === '리에엑트' ? ( 
//         <h1>리엑트입니다.</h1>
//       ) : (
//         <h2>리엑트가 아닙니다.</h2>
//       )}
//     </>
//   );
// }

/*
  - 2.4.4 AND 연산자(&&)를 사용한 조건부 렌더링
*/
// function App() {

//   const name = '리엑트';

//   return <>{name === '리엑트' ? <h1>리엑트입니다.</h1> : null}</>
  
// }

/*
  - 2.4.4 AND 연산자(&&)를 사용한 조건부 렌더링
  위 코드를 && 연산자를 사용해서 조건부 렌더링을 할 수 있다.
*/
function App() {

  const name = '리엑트';

  return <>{name === '리엑트' && <h1>리엑트입니다.</h1>}</>
  
}

export default App;